"""Advent of code 2023
--- Day 15: Lens Library ---
"""

from collections import defaultdict
import re
from common.aoc import file_to_string, aoc_part, get_filename
from common.general import tok


def parse_data(raw_data):
    """Parse the input"""
    data = tok(raw_data, ",")
    return data


def hash(s):
    hv = 0
    for c in s:
        hv += ord(c)
        hv *= 17
        hv %= 256
    return hv


@aoc_part
def solve_part_a(data) -> int:
    """Solve part A"""
    return sum(hash(s) for s in data)


@aoc_part
def solve_part_b(data) -> int:
    """Solve part B"""

    # keyed on box number as generated by the hash
    boxes = defaultdict(dict)

    for d in data:
        rp = re.search(r"(.+)(-|=)(\d?)", d)
        label = rp.group(1)
        op = rp.group(2)
        focal_length = None
        if op == "=":
            focal_length = int(rp.group(3))
        bxi = hash(label)
        box = boxes[bxi]

        if op == "-":
            if label in box:
                del box[label]

        if op == "=":
            if label in box:
                # keep the current ordering for when we update the focal length
                ordering, _ = box[label]
            else:
                # no need to shuffle up just make a higher ordering than the highest
                ordering = max([o for o, _ in box.values()], default=0)
                ordering += 1
            box[label] = ordering, focal_length

    focus_power = 0
    for box_number, content in boxes.items():
        if content:
            box_number += 1
            focus_power += box_number * sum(
                focal_length * (i + 1)
                for i, (_, focal_length) in enumerate(sorted(content.values()))
            )

    return focus_power


EX_RAW_DATA = file_to_string(get_filename(__file__, "ex"))
EX_DATA = parse_data(EX_RAW_DATA)

MY_RAW_DATA = file_to_string(get_filename(__file__, "my"))
MY_DATA = parse_data(MY_RAW_DATA)

assert hash("HASH") == 52

solve_part_a(EX_DATA)
solve_part_a(MY_DATA)

solve_part_b(EX_DATA)
solve_part_b(MY_DATA)
